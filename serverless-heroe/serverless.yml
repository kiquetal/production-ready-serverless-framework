# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: cresterida
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-heroe
frameworkVersion: '4'

stages:
    dev:
        name: development
        description: Development stage
        RESTAURANT_TABLE: ${self:stages.dev.name}-${self:service}-restaurants
    prod:
        name: production
        description: Production stage
provider:
  name: aws
  runtime: python3.10
  stage: ${opt:stage, 'dev'}
  profile: ${opt:aws-profile, 'default'}
  logRetentionInDays: 7
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListAllMyBuckets
            - sts:GetCallerIdentity
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: !GetAtt RestaurantsTable.Arn
        - Effect: Allow
          Action:
            - execute-api:Invoke
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants'
custom:
  pythonRequirements:
    layer: true

package:
  individually: true

functions:
  index:
    handler: lambdas/index.load_restaurants
    name: ${self:stages.${self:provider.stage}.name}-index
    events:
      - http:
          path: /
          method: get
          cors: true

    package:
        exclude:
            - '**'
        include:
            - lambdas/index.py
            - lib/response.py
            - lib/sig4.py
            - static/index.html
            - static/index-cognito.html
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      default_results: 8
      API_GATEWAY: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}'
      COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      COGNITO_WEB_CLIENT_ID: !Ref WebCognitoUserPoolClient
  get-restaurants:
    handler: lambdas/restaurants.handler
    name: ${self:stages.${self:provider.stage}.name}-get-restaurants
    environment:
      RESTAURANTS_TABLE: ${self:stages.${self:provider.stage}.RESTAURANT_TABLE}
      default_results: 8
    events:
      - http:
          path: /restaurants
          method: get
          cors: true
          authorizer: aws_iam
    package:
      exclude:
        - '**'
      include:
        - lambdas/restaurants.py
        - lib/response.py
    layers:
      - Ref: PythonRequirementsLambdaLayer
  search-restaurants:
    handler: lambdas/search-restaurants.handler
    name: ${self:stages.${self:provider.stage}.name}-search-restaurants
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPoolId.Arn
    package:
        exclude:
            - '**'
        include:
            - lambdas/search-restaurants.py
            - lib/response.py
    environment:
      default_results: 8
      RESTAURANTS_TABLE: ${self:stages.${self:provider.stage}.RESTAURANT_TABLE}
plugins:
  - serverless-python-requirements
resources:
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:stages.${self:provider.stage}.RESTAURANT_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPoolId:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPoolId
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPoolId
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
  Outputs:
    CognitoUserPoolId:
      Value: !Ref CognitoUserPoolId
      Export:
        Name: ${self:service}-${sls:stage}-CognitoUserPoolId
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPoolId.Arn
      Export:
        Name: ${self:service}-${sls:stage}-CognitoUserPoolArn
    WebCognitoUserPoolClientId:
      Value: !Ref WebCognitoUserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-WebCognitoUserPoolClientId
    ServerCognitoUserPoolClientId:
      Value: !Ref ServerCognitoUserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-ServerCognitoUserPoolClientId
