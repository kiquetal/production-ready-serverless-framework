# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: cresterida
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-heroe
frameworkVersion: '4'

stages:
    dev:
        name: development
        description: Development stage
        RESTAURANT_TABLE: ${self:stages.dev.name}-${self:service}-restaurants
        PREFIX_SSM: ${self:service}/${self:provider.stage}
        EVENT_BRIDGE_EVENTS: ${self:service}-${self:provider.stage}-orders-events
        ORDERS_TOPIC: ${self:service}-${self:provider.stage}-orders-topic
        IDEMPOTENCY_TABLE: ${self:service}-${self:provider.stage}-idempotency
        QUEUE_ON_FAILURE: ${self:service}-${self:provider.stage}-queue-on-failure
        ORDERS_TABLE: ${self:service}-${self:provider.stage}-orders
    prod:
        name: production
        description: Production stage
provider:
  name: aws
  runtime: python3.10
  stage: ${opt:stage, 'dev'}
  profile: ${opt:aws-profile, ''}
  logRetentionInDays: 7
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListAllMyBuckets
            - sts:GetCallerIdentity
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: !GetAtt RestaurantsTable.Arn
        - Effect: Allow
          Action:
            - execute-api:Invoke
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants'
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:stages.${self:provider.stage}.PREFIX_SSM}/*'
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: !GetAtt EventBusEvents.Arn
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref RestaurantNotificationTopic
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          Resource: !GetAtt IdempotencyTable.Arn

        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:GetItem
          Resource: !GetAtt OrdersTable.Arn

custom:
  pythonRequirements:
    layer: true

package:
  individually: true

stepFunctions:
  stateMachines:
    orderFlow:
      definition:
        ${file(state_machines/order-flow.yml)}
functions:
  index:
    handler: lambdas/index.load_restaurants
    name: ${self:stages.${self:provider.stage}.name}-index
    events:
      - http:
          path: /
          method: get
          cors: true

    package:
        exclude:
            - '**'
        include:
            - lambdas/index.py
            - lib/response.py
            - lib/sig4.py
            - static/index.html
            - static/index-cognito.html
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      DEFAULT_RESULTS: '/${self:stages.${self:provider.stage}.PREFIX_SSM}/default_results'
      API_GATEWAY: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}'
      API_PROD_DOMAIN: https://serverless-heroe.cresterida.me
      COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      COGNITO_WEB_CLIENT_ID: !Ref WebCognitoUserPoolClient
      ORDERS_API: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/orders'
  get-restaurants:
    handler: lambdas/restaurants.handler
    name: ${self:stages.${self:provider.stage}.name}-get-restaurants
    environment:
      RESTAURANTS_TABLE: ${self:stages.${self:provider.stage}.RESTAURANT_TABLE}
      default_results: 8
    events:
      - http:
          path: /restaurants
          method: get
          cors: true
          authorizer: aws_iam
    package:
      exclude:
        - '**'
      include:
        - lambdas/restaurants.py
        - lib/response.py
    layers:
      - Ref: PythonRequirementsLambdaLayer
  search-restaurants:
    handler: lambdas/search-restaurants.handler
    name: ${self:stages.${self:provider.stage}.name}-search-restaurants
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPoolId.Arn
    package:
        exclude:
            - '**'
        include:
            - lambdas/search-restaurants.py
            - lib/response.py
    environment:
      default_results: 8
      RESTAURANTS_TABLE: ${self:stages.${self:provider.stage}.RESTAURANT_TABLE}
  place-order:
    handler: lambdas/place-order.handler
    name: ${self:stages.${self:provider.stage}.name}-place-order
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPoolId.Arn
    package:
      exclude:
      - '**'
      include:
      - lambdas/place-order.py
      - lib/response.py
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      EVENT_BUS_NAME: ${self:stages.${self:provider.stage}.EVENT_BRIDGE_EVENTS}
  notify-restaurant:
    handler: lambdas/notify-restaurant.handler
    name: ${self:stages.${self:provider.stage}.name}-notify-restaurant
    events:
      - eventBridge:
          eventBus: !Ref EventBusEvents
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    package:
      exclude:
        - '**'
      include:
        - lambdas/notify-restaurant.py
        - lib/response.py
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      SNS_TOPIC_ARN: !Ref RestaurantNotificationTopic
      EVENT_BUS_NAME: ${self:stages.${self:provider.stage}.EVENT_BRIDGE_EVENTS}
      IDEMPOTENCY_TABLE: ${self:stages.${self:provider.stage}.IDEMPOTENCY_TABLE}
    destinations:
      onFailure:
        type: sqs
        arn: !GetAtt OnFailureQueue.Arn
  seed-orders:
    handler: lambdas/seed-order.handler
    name: ${self:stages.${self:provider.stage}.name}-seed-orders
    events:
      - eventBridge:
          eventBus: !Ref EventBusEvents
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    package:
      exclude:
        - '**'
      include:
        - lambdas/seed-order.py
        - lib/response.py
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      ORDERS_TABLE: ${self:stages.${self:provider.stage}.ORDERS_TABLE}
      IDEMPOTENCY_TABLE: ${self:stages.${self:provider.stage}.IDEMPOTENCY_TABLE}
plugins:
  - serverless-python-requirements
  - serverless-step-functions
resources:
  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:stages.${self:provider.stage}.RESTAURANT_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPoolId:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPoolId
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPoolId
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    EventBusEvents:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:stages.${self:provider.stage}.EVENT_BRIDGE_EVENTS}
    UserNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:stages.${self:provider.stage}.name}-user-notification-topic
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:stages.${self:provider.stage}.ORDERS_TOPIC}
    IdempotencyTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:stages.${self:provider.stage}.IDEMPOTENCY_TABLE}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          TimeToLiveSpecification:
            Enabled: true
            AttributeName: expiration
    OnFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:stages.${self:provider.stage}.QUEUE_ON_FAILURE}
    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:stages.${self:provider.stage}.name}-alarm-topic
    AlarmTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AlarmTopic
        Protocol: email
        Endpoint: kiquetal@gmail.com
    OnFailureQueueAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:stages.${self:provider.stage}.name}-on-failure-alarm
        AlarmDescription: "Alarm when the OnFailureQueue has messages"
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
          - Name: QueueName
            Value: !GetAtt OnFailureQueue.QueueName
        AlarmActions:
          - !Ref AlarmTopic
    DestinationDeliveryAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:stages.${self:provider.stage}.name}-destination-delivery-alarm
        AlarmDescription: "Alarm when the OnFailureQueue has messages"
        MetricName: DestinationDeliveryFailures
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 1
        Threshold: 0
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Dimensions:
        - Name: FunctionName
          Value: !Ref NotifyDashrestaurantLambdaFunction
        AlarmActions:
          - !Ref AlarmTopic
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:stages.${self:provider.stage}.ORDERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    EventBusArchive:
      Type: AWS::Events::Archive
      Properties:
        ArchiveName: ${self:stages.${self:provider.stage}.EVENT_BRIDGE_EVENTS}-archive
        SourceArn: !GetAtt EventBusEvents.Arn
        RetentionDays: 30
  Outputs:
    CognitoUserPoolId:
      Value: !Ref CognitoUserPoolId
      Export:
        Name: ${self:service}-${sls:stage}-CognitoUserPoolId
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPoolId.Arn
      Export:
        Name: ${self:service}-${sls:stage}-CognitoUserPoolArn
    WebCognitoUserPoolClientId:
      Value: !Ref WebCognitoUserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-WebCognitoUserPoolClientId
    ServerCognitoUserPoolClientId:
      Value: !Ref ServerCognitoUserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-ServerCognitoUserPoolClientId
    OrdersTopic:
      Value: !Ref RestaurantNotificationTopic
      Export:
        Name: ${self:service}-${sls:stage}-OrdersTopic
